#usda 1.0
(
    customLayerData = {
        dictionary MovieCaptureSettings = {
            double animation_fps = 24
            int batch_count = 1
            string camera_name = "/cameras/camera1"
            bool capture_application = 0
            int capture_every_nth_frames = 20
            bool capture_every_nth_frames_checked = 0
            int capture_frame_end = 41
            int capture_frame_start = 1
            string capture_name = "iesTest-rtx"
            string capture_range = "Custom Range - Frames"
            double capture_time_end = 10
            double capture_time_start = 0
            string exr_compression_method = "zips"
            double fps = 24
            bool generate_shader_cache = 0
            bool hdr_for_exr_checked = 1
            bool hdr_for_exr_visible = 0
            int iray_pathtrace_spp = 1
            int iray_subframes_per_frame = 32
            string movie_type = "Sequence"
            int mp4_encoding_bitrate = 16777216
            int mp4_encoding_iframe_interval = 60
            string mp4_encoding_preset = "PRESET_DEFAULT"
            string mp4_encoding_profile = "H264_PROFILE_HIGH"
            string mp4_encoding_rc_mode = "RC_VBR"
            int mp4_encoding_rc_target_quality = 0
            bool mp4_encoding_video_full_range_flag = 0
            string output_format = ".exr"
            string output_path = "./renders/rtx"
            bool overwrite_existing_frame_checked = 0
            bool pathtrace_mb_checked = 0
            double pathtrace_mb_frame_shutter_close = 0.5
            double pathtrace_mb_frame_shutter_open = 0
            int pathtrace_mb_subframes = 64
            int pathtrace_spp_per_iteration_mgpu = 1
            int pathtrace_spp_per_subframe = 128
            string queue_instance = "localhost Queue"
            int realtime_settle_latency = 0
            string render_preset = "PathTracing"
            bool render_style = 1
            bool renumber_negtive_frames_checked = 0
            int resolution_aspect_ratio_selected = 0
            string resolution_aspect_ratios = '["1.000:1", "16:9", "4:3"]'
            int resolution_height = 512
            string resolution_type = "Custom"
            bool resolution_w_h_linked = 0
            int resolution_width = 512
            int run_n_frames_before_start = 20
            bool run_n_frames_before_start_checked = 0
            bool save_alpha_checked = 0
            bool skip_upload_to_s3 = 0
            int start_delay_seconds = 10
            double sunstudy_end = 18
            int sunstudy_movie_minutes = 1
            int sunstudy_movie_seconds = 1
            double sunstudy_start = 6
            string task_comment = ""
            string task_priority = ""
            string task_type = "create-render"
            bool upload_to_s3 = 0
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 500)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.00000397803842133726, 0.000007956076785831101, -0.000003978038307650422)
            }
            dictionary Right = {
                double3 position = (-500, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 500, 0)
                double radius = 500
            }
            string boundCamera = "/cameras/camera1"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./iesTest.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            int "rtx:externalFrameCounter" = 41
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            double "rtx:post:tonemap:filmIso" = 0
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            string "rtx:rendermode" = "PathTracing"
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "sopcreate_iesTest"
    endTimeCode = 41
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Scope "Render"
{
    def RenderSettings "Settings" (
        prepend apiSchemas = ["KarmaRenderSettingsAPI"]
    )
    {
        custom int arnold:global:AA_samples = 6
        custom bool arnold:global:enable_progressive_render = 1
        custom int arnold:global:GI_total_depth = 0
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default", "render"]
        bool instantaneousShutter = 1
        int karma:global:pathtracedsamples = 64
        int karma:global:samplesperpixel = 9
        custom float karma:object:diffuselimit = 0
        custom float karma:object:reflectlimit = 0
        custom float karma:object:refractlimit = 0
        custom float karma:object:ssslimit = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        int2 resolution = (512, 512)
        custom string ri:integrator:name = "PxrDirectLighting"
    }
}

def Scope "materials"
{
    def Material "usdpreviewsurface1"
    {
        token outputs:displacement.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:displacement>
        token outputs:surface.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:surface>

        def Shader "usdpreviewsurface1"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:ior = 1
            int inputs:useSpecularWorkflow = 1
            token outputs:displacement
            token outputs:surface
        }
    }
}

def Xform "cameras"
{
    def Camera "iesBottom" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (0.001, 1000000)
        float exposure = 0
        float focalLength = 0.0001
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.0002
        float horizontalApertureOffset = 0
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 0.0002
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, -0.7071067811865476, 0.7071067811865476, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }

    def Camera "iesTop" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (0.001, 1000000)
        float exposure = 0
        float focalLength = 0.0001
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.0002
        float horizontalApertureOffset = 0
        token projection = "perspective"
        double shutter:close = 0
        double shutter:open = 0
        float verticalAperture = 0.0002
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (1, -0, 0, 0), (0, -0.7071067811865475, 0.7071067811865476, 0), (0, -0.7071067811865476, -0.7071067811865475, 0), (0, -0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "sopcreate_iesTest" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    rel material:binding = </materials/usdpreviewsurface1>
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-0.5, -0.5, -0.5), (0.5, 0.5, 0.5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 2, 3, 1, 4, 6, 7, 5, 6, 3, 2, 7, 5, 0, 1, 4, 5, 7, 2, 0, 1, 3, 6, 4]
        uniform token orientation = "leftHanded"
        point3f[] points = [(0.5, -0.5, 0.5), (-0.5, -0.5, 0.5), (0.5, 0.5, 0.5), (-0.5, 0.5, 0.5), (-0.5, -0.5, -0.5), (0.5, -0.5, -0.5), (-0.5, 0.5, -0.5), (0.5, 0.5, -0.5)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "catmullClark"
    }
}

def Xform "lights"
{
    def SphereLight "iesTest_light" (
        prepend apiSchemas = ["ShapingAPI", "HoudiniViewportLightAPI", "HoudiniViewportGuideAPI", "LightAPI"]
    )
    {
        custom float barndoorbottom = 0
        custom float barndoorbottomedge = 0
        custom float barndoorleft = 0
        custom float barndoorleftedge = 0
        custom float barndoorright = 0
        custom float barndoorrightedge = 0
        custom float barndoortop = 0
        custom float barndoortopedge = 0
        float3[] extent = [(-0.005, -0.005, -0.005), (0.005, 0.005, 0.005)]
        color3f inputs:color = (1, 1, 1)
        float inputs:colorTemperature = 6500
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature = 0
        float inputs:exposure = 0
        float inputs:intensity.timeSamples = {
            1: 1000,
            2: 1000,
            3: 1000,
            4: 1000,
            5: 1000,
            6: 1000,
            7: 1000,
            8: 1000,
            9: 1000,
            10: 1000,
            11: 1000,
            12: 1000,
            13: 1000,
            14: 1000,
            15: 1000,
            16: 1000,
            17: 1000,
            18: 1000,
            19: 1000,
            20: 1000,
            21: 1000,
            22: 1000,
            23: 1000,
            24: 1000,
            25: 1000,
            26: 1000,
            27: 1000,
            28: 1000,
            29: 1000,
            30: 1000,
            31: 1000000,
            32: 1000000,
            33: 1000000,
            34: 1000000,
            35: 1000000,
            36: 1000000,
            37: 1000000,
            38: 1000000,
            39: 1000000,
            40: 1000000,
            41: 1000000,
        }
        bool inputs:normalize = 0
        float inputs:radius = 0.005
        float inputs:shaping:cone:angle = 180
        float inputs:shaping:cone:softness = 0
        float inputs:shaping:ies:angleScale.timeSamples = {
            1: 0,
            2: -1,
            3: -0.75,
            4: -0.5,
            5: -0.25,
            6: 4.440892e-16,
            7: 0.25,
            8: 0.5,
            9: 0.75,
            10: 1,
            11: 0,
            12: -1,
            13: -0.75,
            14: -0.5,
            15: -0.25,
            16: 0,
            17: 0.25,
            18: 0.5,
            19: 0.75,
            20: 1,
            21: 0,
            22: -1,
            23: -0.75,
            24: -0.5,
            25: -0.25,
            26: 0,
            27: 0.25,
            28: 0.5,
            29: 0.75,
            30: 1,
            31: 0,
            32: -1,
            33: -0.75,
            34: -0.5,
            35: -0.25,
            36: -6.661338e-16,
            37: 0.25,
            38: 0.5,
            39: 0.75,
            40: 1,
            41: 0,
        }
        asset inputs:shaping:ies:file.timeSamples = {
            1: @../test_stripes_uniform.ies@,
            2: @../test_stripes_uniform.ies@,
            3: @../test_stripes_uniform.ies@,
            4: @../test_stripes_uniform.ies@,
            5: @../test_stripes_uniform.ies@,
            6: @../test_stripes_uniform.ies@,
            7: @../test_stripes_uniform.ies@,
            8: @../test_stripes_uniform.ies@,
            9: @../test_stripes_uniform.ies@,
            10: @../test_stripes_uniform.ies@,
            11: @../test_vstripes_hquadrants_nonuniform.ies@,
            12: @../test_vstripes_hquadrants_nonuniform.ies@,
            13: @../test_vstripes_hquadrants_nonuniform.ies@,
            14: @../test_vstripes_hquadrants_nonuniform.ies@,
            15: @../test_vstripes_hquadrants_nonuniform.ies@,
            16: @../test_vstripes_hquadrants_nonuniform.ies@,
            17: @../test_vstripes_hquadrants_nonuniform.ies@,
            18: @../test_vstripes_hquadrants_nonuniform.ies@,
            19: @../test_vstripes_hquadrants_nonuniform.ies@,
            20: @../test_vstripes_hquadrants_nonuniform.ies@,
            21: @../test_vstripes_hquadrants_nonuniform.ies@,
            22: @../test_vstripes_hquadrants_nonuniform.ies@,
            23: @../test_vstripes_hquadrants_nonuniform.ies@,
            24: @../test_vstripes_hquadrants_nonuniform.ies@,
            25: @../test_vstripes_hquadrants_nonuniform.ies@,
            26: @../test_vstripes_hquadrants_nonuniform.ies@,
            27: @../test_vstripes_hquadrants_nonuniform.ies@,
            28: @../test_vstripes_hquadrants_nonuniform.ies@,
            29: @../test_vstripes_hquadrants_nonuniform.ies@,
            30: @../test_vstripes_hquadrants_nonuniform.ies@,
            31: @../test_vstripes_hquadrants_nonuniform.ies@,
            32: @../test_vstripes_hquadrants_nonuniform.ies@,
            33: @../test_vstripes_hquadrants_nonuniform.ies@,
            34: @../test_vstripes_hquadrants_nonuniform.ies@,
            35: @../test_vstripes_hquadrants_nonuniform.ies@,
            36: @../test_vstripes_hquadrants_nonuniform.ies@,
            37: @../test_vstripes_hquadrants_nonuniform.ies@,
            38: @../test_vstripes_hquadrants_nonuniform.ies@,
            39: @../test_vstripes_hquadrants_nonuniform.ies@,
            40: @../test_vstripes_hquadrants_nonuniform.ies@,
            41: @@,
        }
        bool inputs:shaping:ies:normalize.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
            17: 0,
            18: 0,
            19: 0,
            20: 0,
            21: 1,
            22: 1,
            23: 1,
            24: 1,
            25: 1,
            26: 1,
            27: 1,
            28: 1,
            29: 1,
            30: 1,
            31: 0,
            32: 0,
            33: 0,
            34: 0,
            35: 0,
            36: 0,
            37: 0,
            38: 0,
            39: 0,
            40: 0,
            41: 0,
        }
        float inputs:specular = 1
        rel light:filters = None
        bool primvars:arnold:visibility:camera = 0 (
            interpolation = "constant"
        )
        string primvars:karma:object:rendervisibility = "-primary" (
            interpolation = "constant"
        )
        int primvars:ri:attributes:visibility:camera = 0 (
            interpolation = "constant"
        )
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

