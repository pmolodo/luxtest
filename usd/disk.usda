#usda 1.0
(
    customLayerData = {
        dictionary MovieCaptureSettings = {
            double animation_fps = 24
            int batch_count = 1
            string camera_name = "/cameras/camera1"
            bool capture_application = 0
            int capture_every_nth_frames = 20
            bool capture_every_nth_frames_checked = 0
            int capture_frame_end = 60
            int capture_frame_start = 1
            string capture_name = "disk-rtx"
            string capture_range = "Custom Range - Frames"
            double capture_time_end = 10
            double capture_time_start = 0
            string exr_compression_method = "zips"
            double fps = 24
            bool generate_shader_cache = 0
            bool hdr_for_exr_checked = 1
            bool hdr_for_exr_visible = 0
            int iray_pathtrace_spp = 1
            int iray_subframes_per_frame = 32
            string movie_type = "Sequence"
            int mp4_encoding_bitrate = 16777216
            int mp4_encoding_iframe_interval = 60
            string mp4_encoding_preset = "PRESET_DEFAULT"
            string mp4_encoding_profile = "H264_PROFILE_HIGH"
            string mp4_encoding_rc_mode = "RC_VBR"
            int mp4_encoding_rc_target_quality = 0
            bool mp4_encoding_video_full_range_flag = 0
            string output_format = ".exr"
            string output_path = "./renders/rtx"
            bool overwrite_existing_frame_checked = 0
            bool pathtrace_mb_checked = 0
            double pathtrace_mb_frame_shutter_close = 0.5
            double pathtrace_mb_frame_shutter_open = 0
            int pathtrace_mb_subframes = 64
            int pathtrace_spp_per_iteration_mgpu = 1
            int pathtrace_spp_per_subframe = 128
            string queue_instance = "localhost Queue"
            int realtime_settle_latency = 0
            string render_preset = "PathTracing"
            bool render_style = 1
            bool renumber_negtive_frames_checked = 0
            int resolution_aspect_ratio_selected = 0
            string resolution_aspect_ratios = '["1.000:1", "16:9", "4:3"]'
            int resolution_height = 512
            string resolution_type = "Custom"
            bool resolution_w_h_linked = 0
            int resolution_width = 512
            int run_n_frames_before_start = 20
            bool run_n_frames_before_start_checked = 0
            bool save_alpha_checked = 0
            bool skip_upload_to_s3 = 0
            int start_delay_seconds = 10
            double sunstudy_end = 18
            int sunstudy_movie_minutes = 1
            int sunstudy_movie_seconds = 1
            double sunstudy_start = 6
            string task_comment = ""
            string task_priority = ""
            string task_type = "create-render"
            bool upload_to_s3 = 0
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 500)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.00000397803842133726, 0.000007956076785831101, -0.000003978038307650422)
            }
            dictionary Right = {
                double3 position = (-500, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 500, 0)
                double radius = 500
            }
            string boundCamera = "/cameras/camera1"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./disk.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            int "rtx:externalFrameCounter" = 60
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            double "rtx:post:tonemap:filmIso" = 0
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            string "rtx:rendermode" = "PathTracing"
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "small_angled_rect"
    endTimeCode = 60
    framesPerSecond = 24
    metersPerUnit = 1
    startTimeCode = 1
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Scope "Render"
{
    def RenderSettings "Settings" (
        prepend apiSchemas = ["KarmaRenderSettingsAPI"]
    )
    {
        custom int arnold:global:AA_samples = 6
        custom bool arnold:global:enable_progressive_render = 1
        custom int arnold:global:GI_total_depth = 0
        rel camera = </cameras/camera1>
        float4 dataWindowNDC = (0, 0, 1, 1)
        token[] includedPurposes = ["default", "render"]
        bool instantaneousShutter = 1
        int karma:global:pathtracedsamples = 64
        int karma:global:samplesperpixel = 9
        custom float karma:object:diffuselimit = 0
        custom float karma:object:reflectlimit = 0
        custom float karma:object:refractlimit = 0
        custom float karma:object:ssslimit = 0
        token[] materialBindingPurposes = ["full", "allPurpose"]
        float pixelAspectRatio = 1
        int2 resolution = (512, 512)
        custom string ri:integrator:name = "PxrDirectLighting"
    }
}

def Scope "materials"
{
    def Material "usdpreviewsurface1"
    {
        token outputs:displacement.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:displacement>
        token outputs:surface.connect = </materials/usdpreviewsurface1/usdpreviewsurface1.outputs:surface>

        def Shader "usdpreviewsurface1"
        {
            uniform token info:id = "UsdPreviewSurface"
            color3f inputs:diffuseColor = (1, 1, 1)
            float inputs:ior = 1
            int inputs:useSpecularWorkflow = 1
            token outputs:displacement
            token outputs:surface
        }
    }
}

def Xform "cameras"
{
    def Camera "camera1" (
        prepend apiSchemas = ["HoudiniCameraPlateAPI", "HoudiniViewportGuideAPI"]
    )
    {
        float2 clippingRange = (1, 1000000)
        float exposure = 0
        float focalLength = 0.5
        float focusDistance = 5
        float fStop = 0
        float horizontalAperture = 0.20955
        float horizontalApertureOffset = 0
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        float verticalAperture = 0.20955
        float verticalApertureOffset = 0
        matrix4d xformOp:transform = ( (1, 0, 0, 0), (0, 0, -1, 0), (0, 1, 0, 0), (0, 30, 0, 1) )
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

def Xform "floor_plane" (
    prepend apiSchemas = ["MaterialBindingAPI"]
    kind = "component"
)
{
    rel material:binding = </materials/usdpreviewsurface1>
    matrix4d xformOp:transform:xform = ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0"
    {
        float3[] extent = [(-5, 0, -5), (5, 0, 5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 11, 10, 1, 2, 12, 11, 2, 3, 13, 12, 3, 4, 14, 13, 4, 5, 15, 14, 5, 6, 16, 15, 6, 7, 17, 16, 7, 8, 18, 17, 8, 9, 19, 18, 10, 11, 21, 20, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 20, 21, 31, 30, 21, 22, 32, 31, 22, 23, 33, 32, 23, 24, 34, 33, 24, 25, 35, 34, 25, 26, 36, 35, 26, 27, 37, 36, 27, 28, 38, 37, 28, 29, 39, 38, 30, 31, 41, 40, 31, 32, 42, 41, 32, 33, 43, 42, 33, 34, 44, 43, 34, 35, 45, 44, 35, 36, 46, 45, 36, 37, 47, 46, 37, 38, 48, 47, 38, 39, 49, 48, 40, 41, 51, 50, 41, 42, 52, 51, 42, 43, 53, 52, 43, 44, 54, 53, 44, 45, 55, 54, 45, 46, 56, 55, 46, 47, 57, 56, 47, 48, 58, 57, 48, 49, 59, 58, 50, 51, 61, 60, 51, 52, 62, 61, 52, 53, 63, 62, 53, 54, 64, 63, 54, 55, 65, 64, 55, 56, 66, 65, 56, 57, 67, 66, 57, 58, 68, 67, 58, 59, 69, 68, 60, 61, 71, 70, 61, 62, 72, 71, 62, 63, 73, 72, 63, 64, 74, 73, 64, 65, 75, 74, 65, 66, 76, 75, 66, 67, 77, 76, 67, 68, 78, 77, 68, 69, 79, 78, 70, 71, 81, 80, 71, 72, 82, 81, 72, 73, 83, 82, 73, 74, 84, 83, 74, 75, 85, 84, 75, 76, 86, 85, 76, 77, 87, 86, 77, 78, 88, 87, 78, 79, 89, 88, 80, 81, 91, 90, 81, 82, 92, 91, 82, 83, 93, 92, 83, 84, 94, 93, 84, 85, 95, 94, 85, 86, 96, 95, 86, 87, 97, 96, 87, 88, 98, 97, 88, 89, 99, 98]
        uniform token orientation = "leftHanded"
        point3f[] points = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

def Xform "small_angled_rect" (
    kind = "component"
)
{
    matrix4d xformOp:transform:xform = ( (0.1, 0, 0, 0), (0, 0.07071067811865477, 0.07071067811865477, 0), (0, -0.07071067811865477, 0.07071067811865477, 0), (0, 0.2, -1, 1) )
    uniform token[] xformOpOrder = ["xformOp:transform:xform"]

    def Mesh "mesh_0" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        bool doubleSided = 1
        float3[] extent = [(-5, 0, -5), (5, 0, 5)]
        int[] faceVertexCounts = [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4]
        int[] faceVertexIndices = [0, 1, 11, 10, 1, 2, 12, 11, 2, 3, 13, 12, 3, 4, 14, 13, 4, 5, 15, 14, 5, 6, 16, 15, 6, 7, 17, 16, 7, 8, 18, 17, 8, 9, 19, 18, 10, 11, 21, 20, 11, 12, 22, 21, 12, 13, 23, 22, 13, 14, 24, 23, 14, 15, 25, 24, 15, 16, 26, 25, 16, 17, 27, 26, 17, 18, 28, 27, 18, 19, 29, 28, 20, 21, 31, 30, 21, 22, 32, 31, 22, 23, 33, 32, 23, 24, 34, 33, 24, 25, 35, 34, 25, 26, 36, 35, 26, 27, 37, 36, 27, 28, 38, 37, 28, 29, 39, 38, 30, 31, 41, 40, 31, 32, 42, 41, 32, 33, 43, 42, 33, 34, 44, 43, 34, 35, 45, 44, 35, 36, 46, 45, 36, 37, 47, 46, 37, 38, 48, 47, 38, 39, 49, 48, 40, 41, 51, 50, 41, 42, 52, 51, 42, 43, 53, 52, 43, 44, 54, 53, 44, 45, 55, 54, 45, 46, 56, 55, 46, 47, 57, 56, 47, 48, 58, 57, 48, 49, 59, 58, 50, 51, 61, 60, 51, 52, 62, 61, 52, 53, 63, 62, 53, 54, 64, 63, 54, 55, 65, 64, 55, 56, 66, 65, 56, 57, 67, 66, 57, 58, 68, 67, 58, 59, 69, 68, 60, 61, 71, 70, 61, 62, 72, 71, 62, 63, 73, 72, 63, 64, 74, 73, 64, 65, 75, 74, 65, 66, 76, 75, 66, 67, 77, 76, 67, 68, 78, 77, 68, 69, 79, 78, 70, 71, 81, 80, 71, 72, 82, 81, 72, 73, 83, 82, 73, 74, 84, 83, 74, 75, 85, 84, 75, 76, 86, 85, 76, 77, 87, 86, 77, 78, 88, 87, 78, 79, 89, 88, 80, 81, 91, 90, 81, 82, 92, 91, 82, 83, 93, 92, 83, 84, 94, 93, 84, 85, 95, 94, 85, 86, 96, 95, 86, 87, 97, 96, 87, 88, 98, 97, 88, 89, 99, 98]
        rel material:binding = </materials/usdpreviewsurface1>
        uniform token orientation = "leftHanded"
        point3f[] points = [(-5, 0, -5), (-3.8888888, 0, -5), (-2.7777777, 0, -5), (-1.6666665, 0, -5), (-0.55555534, 0, -5), (0.5555558, 0, -5), (1.666667, 0, -5), (2.7777781, 0, -5), (3.8888893, 0, -5), (5, 0, -5), (-5, 0, -3.8888888), (-3.8888888, 0, -3.8888888), (-2.7777777, 0, -3.8888888), (-1.6666665, 0, -3.8888888), (-0.55555534, 0, -3.8888888), (0.5555558, 0, -3.8888888), (1.666667, 0, -3.8888888), (2.7777781, 0, -3.8888888), (3.8888893, 0, -3.8888888), (5, 0, -3.8888888), (-5, 0, -2.7777777), (-3.8888888, 0, -2.7777777), (-2.7777777, 0, -2.7777777), (-1.6666665, 0, -2.7777777), (-0.55555534, 0, -2.7777777), (0.5555558, 0, -2.7777777), (1.666667, 0, -2.7777777), (2.7777781, 0, -2.7777777), (3.8888893, 0, -2.7777777), (5, 0, -2.7777777), (-5, 0, -1.6666665), (-3.8888888, 0, -1.6666665), (-2.7777777, 0, -1.6666665), (-1.6666665, 0, -1.6666665), (-0.55555534, 0, -1.6666665), (0.5555558, 0, -1.6666665), (1.666667, 0, -1.6666665), (2.7777781, 0, -1.6666665), (3.8888893, 0, -1.6666665), (5, 0, -1.6666665), (-5, 0, -0.55555534), (-3.8888888, 0, -0.55555534), (-2.7777777, 0, -0.55555534), (-1.6666665, 0, -0.55555534), (-0.55555534, 0, -0.55555534), (0.5555558, 0, -0.55555534), (1.666667, 0, -0.55555534), (2.7777781, 0, -0.55555534), (3.8888893, 0, -0.55555534), (5, 0, -0.55555534), (-5, 0, 0.5555558), (-3.8888888, 0, 0.5555558), (-2.7777777, 0, 0.5555558), (-1.6666665, 0, 0.5555558), (-0.55555534, 0, 0.5555558), (0.5555558, 0, 0.5555558), (1.666667, 0, 0.5555558), (2.7777781, 0, 0.5555558), (3.8888893, 0, 0.5555558), (5, 0, 0.5555558), (-5, 0, 1.666667), (-3.8888888, 0, 1.666667), (-2.7777777, 0, 1.666667), (-1.6666665, 0, 1.666667), (-0.55555534, 0, 1.666667), (0.5555558, 0, 1.666667), (1.666667, 0, 1.666667), (2.7777781, 0, 1.666667), (3.8888893, 0, 1.666667), (5, 0, 1.666667), (-5, 0, 2.7777781), (-3.8888888, 0, 2.7777781), (-2.7777777, 0, 2.7777781), (-1.6666665, 0, 2.7777781), (-0.55555534, 0, 2.7777781), (0.5555558, 0, 2.7777781), (1.666667, 0, 2.7777781), (2.7777781, 0, 2.7777781), (3.8888893, 0, 2.7777781), (5, 0, 2.7777781), (-5, 0, 3.8888893), (-3.8888888, 0, 3.8888893), (-2.7777777, 0, 3.8888893), (-1.6666665, 0, 3.8888893), (-0.55555534, 0, 3.8888893), (0.5555558, 0, 3.8888893), (1.666667, 0, 3.8888893), (2.7777781, 0, 3.8888893), (3.8888893, 0, 3.8888893), (5, 0, 3.8888893), (-5, 0, 5), (-3.8888888, 0, 5), (-2.7777777, 0, 5), (-1.6666665, 0, 5), (-0.55555534, 0, 5), (0.5555558, 0, 5), (1.666667, 0, 5), (2.7777781, 0, 5), (3.8888893, 0, 5), (5, 0, 5)] (
            interpolation = "vertex"
        )
        uniform token subdivisionScheme = "none"
    }
}

def Xform "lights"
{
    matrix4d xformOp:transform.timeSamples = {
        1: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        2: ( (0.9659258262890683, 0.25881904510252074, 0, 0), (-0.25881904510252074, 0.9659258262890683, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        3: ( (0.8660254037844387, 0.49999999999999994, 0, 0), (-0.49999999999999994, 0.8660254037844387, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        4: ( (0.7071067811865476, 0.7071067811865476, 0, 0), (-0.7071067811865476, 0.7071067811865476, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        5: ( (0.5000000000000001, 0.8660254037844386, 0, 0), (-0.8660254037844386, 0.5000000000000001, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        6: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        7: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        8: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        9: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        10: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        11: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        12: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        13: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        14: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        15: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        16: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        17: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        18: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        19: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        20: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        21: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        22: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        23: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        24: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        25: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        26: ( (1.25, 0, 0, 0), (0, 1, 0, 0), (0.6000000000000001, 0, 0.75, 0), (0, 0, 0, 1) ),
        27: ( (1.25, 0, 0, 0), (0, 1, 0, 0), (0.6000000000000001, 0, 0.75, 0), (0, 0, 0, 1) ),
        28: ( (1.25, 0, 0, 0), (0, 1, 0, 0), (0.6000000000000001, 0, 0.75, 0), (0, 0, 0, 1) ),
        29: ( (1.25, 0, 0, 0), (0, 1, 0, 0), (0.6000000000000001, 0, 0.75, 0), (0, 0, 0, 1) ),
        30: ( (1.25, 0, 0, 0), (0, 1, 0, 0), (0.6000000000000001, 0, 0.75, 0), (0, 0, 0, 1) ),
        31: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        32: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        33: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        34: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        35: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        36: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        37: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        38: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        39: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        40: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        41: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        42: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        43: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        44: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        45: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        46: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        47: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        48: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        49: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        50: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        51: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        52: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        53: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        54: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        55: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        56: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        57: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        58: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        59: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
        60: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ),
    }
    uniform token[] xformOpOrder = ["xformOp:transform"]

    def DiskLight "disk_light" (
        prepend apiSchemas = ["HoudiniViewportLightAPI", "ShapingAPI", "HoudiniViewportGuideAPI", "LightAPI"]
    )
    {
        custom float barndoorbottom = 0
        custom float barndoorbottomedge = 0
        custom float barndoorleft = 0
        custom float barndoorleftedge = 0
        custom float barndoorright = 0
        custom float barndoorrightedge = 0
        custom float barndoortop = 0
        custom float barndoortopedge = 0
        float3[] extent.timeSamples = {
            1: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            2: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            3: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            4: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            5: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            6: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            7: [(-0.2, -0.2, -0), (0.2, 0.2, 0)],
            8: [(-0.3, -0.3, -0), (0.3, 0.3, 0)],
            9: [(-0.4, -0.4, -0), (0.4, 0.4, 0)],
            10: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            11: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            12: [(-0.2, -0.2, -0), (0.2, 0.2, 0)],
            13: [(-0.3, -0.3, -0), (0.3, 0.3, 0)],
            14: [(-0.4, -0.4, -0), (0.4, 0.4, 0)],
            15: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            16: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            17: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            18: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            19: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            20: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            21: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            22: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            23: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            24: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            25: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            26: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            27: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            28: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            29: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            30: [(-0.1, -0.1, -0), (0.1, 0.1, 0)],
            31: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            32: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            33: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            34: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            35: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            36: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            37: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            38: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            39: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            40: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            41: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            42: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            43: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            44: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            45: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            46: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            47: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            48: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            49: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            50: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            51: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            52: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            53: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            54: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            55: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            56: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            57: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            58: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            59: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
            60: [(-0.5, -0.5, -0), (0.5, 0.5, 0)],
        }
        color3f inputs:color = (1, 1, 1)
        float inputs:colorTemperature.timeSamples = {
            1: 6500,
            2: 6500,
            3: 6500,
            4: 6500,
            5: 6500,
            6: 6500,
            7: 6500,
            8: 6500,
            9: 6500,
            10: 6500,
            11: 6500,
            12: 6500,
            13: 6500,
            14: 6500,
            15: 6500,
            16: 2000,
            17: 4250,
            18: 6500,
            19: 8750,
            20: 11000,
            21: 6500,
            22: 6500,
            23: 6500,
            24: 6500,
            25: 6500,
            26: 6500,
            27: 6500,
            28: 6500,
            29: 6500,
            30: 6500,
            31: 6500,
            32: 6500,
            33: 6500,
            34: 6500,
            35: 6500,
            36: 6500,
            37: 6500,
            38: 6500,
            39: 6500,
            40: 6500,
            41: 6500,
            42: 6500,
            43: 6500,
            44: 6500,
            45: 6500,
            46: 6500,
            47: 6500,
            48: 6500,
            49: 6500,
            50: 6500,
            51: 6500,
            52: 6500,
            53: 6500,
            54: 6500,
            55: 6500,
            56: 6500,
            57: 6500,
            58: 6500,
            59: 6500,
            60: 6500,
        }
        float inputs:diffuse = 1
        bool inputs:enableColorTemperature.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 1,
            17: 1,
            18: 1,
            19: 1,
            20: 1,
            21: 0,
            22: 0,
            23: 0,
            24: 0,
            25: 0,
            26: 0,
            27: 0,
            28: 0,
            29: 0,
            30: 0,
            31: 0,
            32: 0,
            33: 0,
            34: 0,
            35: 0,
            36: 0,
            37: 0,
            38: 0,
            39: 0,
            40: 0,
            41: 0,
            42: 0,
            43: 0,
            44: 0,
            45: 0,
            46: 0,
            47: 0,
            48: 0,
            49: 0,
            50: 0,
            51: 0,
            52: 0,
            53: 0,
            54: 0,
            55: 0,
            56: 0,
            57: 0,
            58: 0,
            59: 0,
            60: 0,
        }
        float inputs:exposure.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
            17: 0,
            18: 0,
            19: 0,
            20: 0,
            21: 0,
            22: 0,
            23: 0,
            24: 0,
            25: 0,
            26: 0,
            27: 0,
            28: 0,
            29: 0,
            30: 0,
            31: 0,
            32: 0,
            33: 0,
            34: 0,
            35: 0,
            36: 0,
            37: 0,
            38: 0,
            39: 0,
            40: 0,
            41: 0,
            42: 0,
            43: 0,
            44: 0,
            45: 0,
            46: 0,
            47: 0,
            48: 0,
            49: 0,
            50: 0,
            51: -11,
            52: -11,
            53: -11,
            54: -11,
            55: -11,
            56: 0,
            57: 0,
            58: 0,
            59: 0,
            60: 0,
        }
        float inputs:intensity.timeSamples = {
            1: 5,
            2: 5,
            3: 5,
            4: 5,
            5: 5,
            6: 5,
            7: 5,
            8: 5,
            9: 5,
            10: 5,
            11: 5,
            12: 5,
            13: 5,
            14: 5,
            15: 5,
            16: 5,
            17: 5,
            18: 5,
            19: 5,
            20: 5,
            21: 125,
            22: 125,
            23: 125,
            24: 125,
            25: 125,
            26: 125,
            27: 125,
            28: 125,
            29: 125,
            30: 125,
            31: 5,
            32: 5,
            33: 5,
            34: 5,
            35: 5,
            36: 5,
            37: 5,
            38: 5,
            39: 5,
            40: 5,
            41: 5,
            42: 5,
            43: 5,
            44: 5,
            45: 5,
            46: 5,
            47: 5,
            48: 5,
            49: 5,
            50: 5,
            51: 5,
            52: 5,
            53: 5,
            54: 5,
            55: 5,
            56: 1,
            57: 1,
            58: 1,
            59: 1,
            60: 1,
        }
        bool inputs:normalize.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 1,
            12: 1,
            13: 1,
            14: 1,
            15: 1,
            16: 0,
            17: 0,
            18: 0,
            19: 0,
            20: 0,
            21: 0,
            22: 0,
            23: 0,
            24: 0,
            25: 0,
            26: 0,
            27: 0,
            28: 0,
            29: 0,
            30: 0,
            31: 0,
            32: 0,
            33: 0,
            34: 0,
            35: 0,
            36: 0,
            37: 0,
            38: 0,
            39: 0,
            40: 0,
            41: 0,
            42: 0,
            43: 0,
            44: 0,
            45: 0,
            46: 0,
            47: 0,
            48: 0,
            49: 0,
            50: 0,
            51: 0,
            52: 0,
            53: 0,
            54: 0,
            55: 0,
            56: 0,
            57: 0,
            58: 0,
            59: 0,
            60: 0,
        }
        float inputs:radius.timeSamples = {
            1: 0.5,
            2: 0.5,
            3: 0.5,
            4: 0.5,
            5: 0.5,
            6: 0.1,
            7: 0.2,
            8: 0.3,
            9: 0.4,
            10: 0.5,
            11: 0.1,
            12: 0.2,
            13: 0.3,
            14: 0.4,
            15: 0.5,
            16: 0.5,
            17: 0.5,
            18: 0.5,
            19: 0.5,
            20: 0.5,
            21: 0.1,
            22: 0.1,
            23: 0.1,
            24: 0.1,
            25: 0.1,
            26: 0.1,
            27: 0.1,
            28: 0.1,
            29: 0.1,
            30: 0.1,
            31: 0.5,
            32: 0.5,
            33: 0.5,
            34: 0.5,
            35: 0.5,
            36: 0.5,
            37: 0.5,
            38: 0.5,
            39: 0.5,
            40: 0.5,
            41: 0.5,
            42: 0.5,
            43: 0.5,
            44: 0.5,
            45: 0.5,
            46: 0.5,
            47: 0.5,
            48: 0.5,
            49: 0.5,
            50: 0.5,
            51: 0.5,
            52: 0.5,
            53: 0.5,
            54: 0.5,
            55: 0.5,
            56: 0.5,
            57: 0.5,
            58: 0.5,
            59: 0.5,
            60: 0.5,
        }
        float inputs:shaping:cone:angle.timeSamples = {
            1: 180,
            2: 180,
            3: 180,
            4: 180,
            5: 180,
            6: 180,
            7: 180,
            8: 180,
            9: 180,
            10: 180,
            11: 180,
            12: 180,
            13: 180,
            14: 180,
            15: 180,
            16: 180,
            17: 180,
            18: 180,
            19: 180,
            20: 180,
            21: 170,
            22: 130,
            23: 90,
            24: 50,
            25: 10,
            26: 170,
            27: 170,
            28: 170,
            29: 170,
            30: 170,
            31: 45,
            32: 45,
            33: 45,
            34: 45,
            35: 45,
            36: 180,
            37: 180,
            38: 180,
            39: 180,
            40: 180,
            41: 60,
            42: 60,
            43: 60,
            44: 60,
            45: 60,
            46: 180,
            47: 180,
            48: 180,
            49: 180,
            50: 180,
            51: 180,
            52: 180,
            53: 180,
            54: 180,
            55: 180,
            56: 180,
            57: 180,
            58: 180,
            59: 180,
            60: 180,
        }
        float inputs:shaping:cone:softness.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
            17: 0,
            18: 0,
            19: 0,
            20: 0,
            21: 0,
            22: 0,
            23: 0,
            24: 0,
            25: 0,
            26: 0,
            27: 0,
            28: 0,
            29: 0,
            30: 0,
            31: 0,
            32: 0.25,
            33: 0.5,
            34: 0.75,
            35: 1,
            36: 0,
            37: 0,
            38: 0,
            39: 0,
            40: 0,
            41: 0,
            42: 0,
            43: 0,
            44: 0,
            45: 0,
            46: 0,
            47: 0,
            48: 0,
            49: 0,
            50: 0,
            51: 0,
            52: 0,
            53: 0,
            54: 0,
            55: 0,
            56: 0,
            57: 0,
            58: 0,
            59: 0,
            60: 0,
        }
        float inputs:shaping:focus.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
            17: 0,
            18: 0,
            19: 0,
            20: 0,
            21: 0,
            22: 0,
            23: 0,
            24: 0,
            25: 0,
            26: 2,
            27: 2,
            28: 2,
            29: 2,
            30: 2,
            31: 0,
            32: 0,
            33: 0,
            34: 0,
            35: 0,
            36: 0,
            37: 1.25,
            38: 2.5,
            39: 3.75,
            40: 5,
            41: 0,
            42: 1.25,
            43: 2.5,
            44: 3.75,
            45: 5,
            46: 3,
            47: 3,
            48: 3,
            49: 3,
            50: 3,
            51: 0,
            52: 0,
            53: 0,
            54: 0,
            55: 0,
            56: 0,
            57: 0,
            58: 0,
            59: 0,
            60: 0,
        }
        color3f inputs:shaping:focusTint.timeSamples = {
            1: (0, 0, 0),
            2: (0, 0, 0),
            3: (0, 0, 0),
            4: (0, 0, 0),
            5: (0, 0, 0),
            6: (0, 0, 0),
            7: (0, 0, 0),
            8: (0, 0, 0),
            9: (0, 0, 0),
            10: (0, 0, 0),
            11: (0, 0, 0),
            12: (0, 0, 0),
            13: (0, 0, 0),
            14: (0, 0, 0),
            15: (0, 0, 0),
            16: (0, 0, 0),
            17: (0, 0, 0),
            18: (0, 0, 0),
            19: (0, 0, 0),
            20: (0, 0, 0),
            21: (0, 0, 0),
            22: (0, 0, 0),
            23: (0, 0, 0),
            24: (0, 0, 0),
            25: (0, 0, 0),
            26: (0, 0, 1),
            27: (0, 0, 1),
            28: (0, 0, 1),
            29: (0, 0, 1),
            30: (0, 0, 1),
            31: (0, 0, 0),
            32: (0, 0, 0),
            33: (0, 0, 0),
            34: (0, 0, 0),
            35: (0, 0, 0),
            36: (0, 0, 0),
            37: (0, 0, 0),
            38: (0, 0, 0),
            39: (0, 0, 0),
            40: (0, 0, 0),
            41: (1, 0, 0),
            42: (1, 0, 0),
            43: (1, 0, 0),
            44: (1, 0, 0),
            45: (1, 0, 0),
            46: (0, 0, 0),
            47: (0, 0.5, 0),
            48: (0, 1, 0),
            49: (0.5, 1, 0.5),
            50: (1, 1, 1),
            51: (0, 0, 0),
            52: (0, 0, 0),
            53: (0, 0, 0),
            54: (0, 0, 0),
            55: (0, 0, 0),
            56: (0, 0, 0),
            57: (0, 0, 0),
            58: (0, 0, 0),
            59: (0, 0, 0),
            60: (0, 0, 0),
        }
        float inputs:shaping:ies:angleScale.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
            17: 0,
            18: 0,
            19: 0,
            20: 0,
            21: 0,
            22: 0,
            23: 0,
            24: 0,
            25: 0,
            26: 0,
            27: 0,
            28: 0,
            29: 0,
            30: 0,
            31: 0,
            32: 0,
            33: 0,
            34: 0,
            35: 0,
            36: 0,
            37: 0,
            38: 0,
            39: 0,
            40: 0,
            41: 0,
            42: 0,
            43: 0,
            44: 0,
            45: 0,
            46: 0,
            47: 0,
            48: 0,
            49: 0,
            50: 0,
            51: -1,
            52: -0.5,
            53: -2.6645353e-15,
            54: 0.5,
            55: 1,
            56: -1,
            57: -0.5,
            58: 0,
            59: 0.5,
            60: 1,
        }
        asset inputs:shaping:ies:file.timeSamples = {
            1: @@,
            2: @@,
            3: @@,
            4: @@,
            5: @@,
            6: @@,
            7: @@,
            8: @@,
            9: @@,
            10: @@,
            11: @@,
            12: @@,
            13: @@,
            14: @@,
            15: @@,
            16: @@,
            17: @@,
            18: @@,
            19: @@,
            20: @@,
            21: @@,
            22: @@,
            23: @@,
            24: @@,
            25: @@,
            26: @@,
            27: @@,
            28: @@,
            29: @@,
            30: @@,
            31: @@,
            32: @@,
            33: @@,
            34: @@,
            35: @@,
            36: @@,
            37: @@,
            38: @@,
            39: @@,
            40: @@,
            41: @@,
            42: @@,
            43: @@,
            44: @@,
            45: @@,
            46: @@,
            47: @@,
            48: @@,
            49: @@,
            50: @@,
            51: @../bega_omni002_4777lm.ies@,
            52: @../bega_omni002_4777lm.ies@,
            53: @../bega_omni002_4777lm.ies@,
            54: @../bega_omni002_4777lm.ies@,
            55: @../bega_omni002_4777lm.ies@,
            56: @../bega_omni002_4777lm.ies@,
            57: @../bega_omni002_4777lm.ies@,
            58: @../bega_omni002_4777lm.ies@,
            59: @../bega_omni002_4777lm.ies@,
            60: @../bega_omni002_4777lm.ies@,
        }
        bool inputs:shaping:ies:normalize.timeSamples = {
            1: 0,
            2: 0,
            3: 0,
            4: 0,
            5: 0,
            6: 0,
            7: 0,
            8: 0,
            9: 0,
            10: 0,
            11: 0,
            12: 0,
            13: 0,
            14: 0,
            15: 0,
            16: 0,
            17: 0,
            18: 0,
            19: 0,
            20: 0,
            21: 0,
            22: 0,
            23: 0,
            24: 0,
            25: 0,
            26: 0,
            27: 0,
            28: 0,
            29: 0,
            30: 0,
            31: 0,
            32: 0,
            33: 0,
            34: 0,
            35: 0,
            36: 0,
            37: 0,
            38: 0,
            39: 0,
            40: 0,
            41: 0,
            42: 0,
            43: 0,
            44: 0,
            45: 0,
            46: 0,
            47: 0,
            48: 0,
            49: 0,
            50: 0,
            51: 0,
            52: 0,
            53: 0,
            54: 0,
            55: 0,
            56: 1,
            57: 1,
            58: 1,
            59: 1,
            60: 1,
        }
        float inputs:specular = 1
        rel light:filters = None
        bool primvars:arnold:visibility:camera = 0 (
            interpolation = "constant"
        )
        string primvars:karma:object:rendervisibility = "" (
            interpolation = "constant"
        )
        int primvars:ri:attributes:visibility:camera = 0 (
            interpolation = "constant"
        )
        matrix4d xformOp:transform.timeSamples = {
            1: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            2: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            3: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            4: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            5: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            6: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            7: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            8: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            9: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            10: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            11: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            12: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            13: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            14: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            15: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            16: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            17: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            18: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            19: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            20: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            21: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.3, 0, 1) ),
            22: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.3, 0, 1) ),
            23: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.3, 0, 1) ),
            24: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.3, 0, 1) ),
            25: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.3, 0, 1) ),
            26: ( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0.3, 0, 1) ),
            27: ( (0.707106781186549, 0, -0.707106781186546, 0), (0, 1, 0, 0), (0.707106781186546, 0, 0.707106781186549, 0), (0, 0.3, 0, 1) ),
            28: ( (0, 0, -1, 0), (0, 1, 0, 0), (1, 0, 0, 0), (0, 0.3, 0, 1) ),
            29: ( (-0.707106781186549, 0, -0.707106781186546, 0), (0, 1, 0, 0), (0.707106781186546, 0, -0.707106781186549, 0), (0, 0.3, 0, 1) ),
            30: ( (-1, 0, 0, 0), (0, 1, 0, 0), (0, 0, -1, 0), (0, 0.3, 0, 1) ),
            31: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            32: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            33: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            34: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            35: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            36: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            37: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            38: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            39: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            40: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            41: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            42: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            43: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            44: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            45: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            46: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            47: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            48: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            49: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            50: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            51: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            52: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            53: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            54: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            55: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            56: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            57: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            58: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            59: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
            60: ( (1, 0, 0, 0), (0, 0.7071067811865476, -0.7071067811865476, 0), (0, 0.7071067811865476, 0.7071067811865476, 0), (0, 1, 0, 1) ),
        }
        uniform token[] xformOpOrder = ["xformOp:transform"]
    }
}

